#!/usr/bin/env python3
"""
Test complet de tous les endpoints admin
"""
import urllib.request
import json

def get_admin_token():
    """Obtenir le token admin"""
    url = "http://localhost:8000/auth/login"
    data = {
        "email": "othmanegamghal@gmail.com",
        "password": "admin123"
    }
    
    try:
        req = urllib.request.Request(
            url,
            data=json.dumps(data).encode('utf-8'),
            headers={'Content-Type': 'application/json'}
        )
        
        with urllib.request.urlopen(req) as response:
            result = json.loads(response.read().decode('utf-8'))
            return result['access_token']
    except Exception as e:
        print(f"‚ùå Erreur login: {e}")
        return None

def test_category_crud(token):
    """Test CRUD des cat√©gories"""
    print("\n=== Test CRUD Cat√©gories ===")
    
    # Cr√©er une cat√©gorie
    url = "http://localhost:8000/categories"
    data = {"nom": "Test Category Admin"}
    
    try:
        req = urllib.request.Request(
            url,
            data=json.dumps(data).encode('utf-8'),
            headers={
                'Content-Type': 'application/json',
                'Authorization': f'Bearer {token}'
            }
        )
        
        with urllib.request.urlopen(req) as response:
            result = json.loads(response.read().decode('utf-8'))
            print(f"‚úÖ Cat√©gorie cr√©√©e: {result['nom']} (ID: {result['id_categorie']})")
            category_id = result['id_categorie']
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation cat√©gorie: {e}")
        return
    
    # Mettre √† jour la cat√©gorie
    url = f"http://localhost:8000/categories/{category_id}"
    data = {"nom": "Test Category Admin Updated"}
    
    try:
        req = urllib.request.Request(
            url,
            data=json.dumps(data).encode('utf-8'),
            headers={
                'Content-Type': 'application/json',
                'Authorization': f'Bearer {token}'
            }
        )
        req.get_method = lambda: 'PUT'
        
        with urllib.request.urlopen(req) as response:
            result = json.loads(response.read().decode('utf-8'))
            print(f"‚úÖ Cat√©gorie mise √† jour: {result['nom']}")
    except Exception as e:
        print(f"‚ùå Erreur mise √† jour cat√©gorie: {e}")
    
    # Supprimer la cat√©gorie
    url = f"http://localhost:8000/categories/{category_id}"
    
    try:
        req = urllib.request.Request(
            url,
            headers={'Authorization': f'Bearer {token}'}
        )
        req.get_method = lambda: 'DELETE'
        
        with urllib.request.urlopen(req) as response:
            print("‚úÖ Cat√©gorie supprim√©e")
    except Exception as e:
        print(f"‚ùå Erreur suppression cat√©gorie: {e}")

def test_brand_crud(token):
    """Test CRUD des marques"""
    print("\n=== Test CRUD Marques ===")
    
    # Cr√©er une marque
    url = "http://localhost:8000/brands"
    data = {"nom": "Test Brand Admin"}
    
    try:
        req = urllib.request.Request(
            url,
            data=json.dumps(data).encode('utf-8'),
            headers={
                'Content-Type': 'application/json',
                'Authorization': f'Bearer {token}'
            }
        )
        
        with urllib.request.urlopen(req) as response:
            result = json.loads(response.read().decode('utf-8'))
            print(f"‚úÖ Marque cr√©√©e: {result['nom']} (ID: {result['id_marque']})")
            brand_id = result['id_marque']
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation marque: {e}")
        return
    
    # Mettre √† jour la marque
    url = f"http://localhost:8000/brands/{brand_id}"
    data = {"nom": "Test Brand Admin Updated"}
    
    try:
        req = urllib.request.Request(
            url,
            data=json.dumps(data).encode('utf-8'),
            headers={
                'Content-Type': 'application/json',
                'Authorization': f'Bearer {token}'
            }
        )
        req.get_method = lambda: 'PUT'
        
        with urllib.request.urlopen(req) as response:
            result = json.loads(response.read().decode('utf-8'))
            print(f"‚úÖ Marque mise √† jour: {result['nom']}")
    except Exception as e:
        print(f"‚ùå Erreur mise √† jour marque: {e}")
    
    # Supprimer la marque
    url = f"http://localhost:8000/brands/{brand_id}"
    
    try:
        req = urllib.request.Request(
            url,
            headers={'Authorization': f'Bearer {token}'}
        )
        req.get_method = lambda: 'DELETE'
        
        with urllib.request.urlopen(req) as response:
            print("‚úÖ Marque supprim√©e")
    except Exception as e:
        print(f"‚ùå Erreur suppression marque: {e}")

def test_product_crud(token):
    """Test CRUD des produits"""
    print("\n=== Test CRUD Produits ===")
    
    # Cr√©er un produit
    url = "http://localhost:8000/products"
    data = {
        "id_categorie": 1,
        "id_marque": 1,
        "nom": "Test Product Admin Final",
        "description": "Produit de test final",
        "prix": 199.99,
        "stock": 5,
        "qr_code_path": "https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=500"
    }
    
    try:
        req = urllib.request.Request(
            url,
            data=json.dumps(data).encode('utf-8'),
            headers={
                'Content-Type': 'application/json',
                'Authorization': f'Bearer {token}'
            }
        )
        
        with urllib.request.urlopen(req) as response:
            result = json.loads(response.read().decode('utf-8'))
            print(f"‚úÖ Produit cr√©√©: {result['nom']} (ID: {result['id_produit']})")
            product_id = result['id_produit']
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation produit: {e}")
        return
    
    # Mettre √† jour le produit
    url = f"http://localhost:8000/products/{product_id}"
    data = {
        "nom": "Test Product Admin Final Updated",
        "prix": 299.99
    }
    
    try:
        req = urllib.request.Request(
            url,
            data=json.dumps(data).encode('utf-8'),
            headers={
                'Content-Type': 'application/json',
                'Authorization': f'Bearer {token}'
            }
        )
        req.get_method = lambda: 'PUT'
        
        with urllib.request.urlopen(req) as response:
            result = json.loads(response.read().decode('utf-8'))
            print(f"‚úÖ Produit mis √† jour: {result['nom']} (Prix: {result['prix']})")
    except Exception as e:
        print(f"‚ùå Erreur mise √† jour produit: {e}")
    
    # Supprimer le produit
    url = f"http://localhost:8000/products/{product_id}"
    
    try:
        req = urllib.request.Request(
            url,
            headers={'Authorization': f'Bearer {token}'}
        )
        req.get_method = lambda: 'DELETE'
        
        with urllib.request.urlopen(req) as response:
            print("‚úÖ Produit supprim√©")
    except Exception as e:
        print(f"‚ùå Erreur suppression produit: {e}")

if __name__ == "__main__":
    print("=== Test complet des endpoints ADMIN ===")
    
    # Obtenir le token admin
    token = get_admin_token()
    if not token:
        print("‚ùå Impossible d'obtenir le token admin")
        exit(1)
    
    print(f"‚úÖ Token admin obtenu: {token[:50]}...")
    
    # Tests CRUD
    test_category_crud(token)
    test_brand_crud(token)
    test_product_crud(token)
    
    print("\nüéâ Tous les tests des endpoints admin sont termin√©s!")







